{"version":3,"sources":["components/Header/Header.jsx","components/Cards/Cards.jsx","Api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Cards","data","confirmed","recovered","deaths","lastUpdate","activeCase","value","Date","toDateString","Card","Body","Title","end","start","duration","separator","toFixed","url","fetchData","country","a","changableUrl","axios","get","modidfiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","undefined","labels","datasets","label","borderColor","pointBackgroundColor","pointBorderColor","backgroundColor","fill","barChart","borderWidth","hoverBorderWidth","hoverBackgroundColor","hoverBorderColor","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountryAPI","Form","Group","defaultValue","onChange","e","target","controlId","Control","as","custom","i","key","App","state","fetchedData","setState","this","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46bf8332.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Header.css'\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"row header\">\n                <div className=\"col\">\n                    <p   >\n                         Wash Your Hands Regularly !! No Hugs !! Stay Home !! Use Sanitizer !! Avoid Crowds !! Don't Touch Your Face \n                    </p>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default Header\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport './Cards.css'\nimport CountUp from 'react-countup';\n\nconst Cards = ({data : {confirmed, recovered, deaths, lastUpdate } }) => {\n    if(!confirmed){\n        return false\n    }\n\n    const activeCase = confirmed.value -(recovered.value+ deaths.value)\n    return(\n        \n        <div>\n            <div className=\"row\">\n                <div className=\"col text-center\">\n                    <h5 className=\"total-case\">Total Cases Reported Till : {new Date(lastUpdate).toDateString()}</h5>\n                </div>  \n            </div>\n        <div className=\"row card-wrapper text-center\">\n             <Card className=\"col col-lg-3 col-md-3 col-sm-12 col-12\" >\n                <Card.Body>\n                <Card.Title><h2>Confirmed</h2></Card.Title>\n                <Card.Title><h3><CountUp end={confirmed.value} start={0} duration={2} separator=','/></h3></Card.Title>\n                </Card.Body>\n            </Card> \n            \n            <Card className=\"col col-lg-3 col-md-3 col-sm-12 col-12\">\n                <Card.Body>\n                <Card.Title><h2>Active </h2></Card.Title>\n                <Card.Title><h3><CountUp end={activeCase} start={0} duration={2} separator=','/></h3></Card.Title>\n                <p> {((activeCase * 100 )/confirmed.value).toFixed(2)}%</p>\n                </Card.Body>\n            </Card> \n\n            <Card className=\"col col-lg-3 col-md-3 col-sm-12 col-12\">\n                <Card.Body>\n                <Card.Title><h2>Recovered </h2></Card.Title>\n                <Card.Title><h3><CountUp end={recovered.value} start={0} duration={2} separator=','/></h3></Card.Title>\n                <p>{((recovered.value * 100 )/confirmed.value).toFixed(2)}%</p>\n                </Card.Body>\n            </Card> \n\n            <Card className=\"col col-lg-3 col-md-3 col-sm-12 col-12\">\n                <Card.Body>\n                <Card.Title><h2>Deaths</h2> </Card.Title>\n                <Card.Title><h3><CountUp end={deaths.value} start={0} duration={2} separator=','/></h3></Card.Title>\n                <p>{((deaths.value * 100 )/confirmed.value).toFixed(2)}%</p>\n                </Card.Body>\n            </Card> \n        </div>\n        </div>\n    )\n}\n\nexport default Cards","import axios from 'axios'\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changableUrl = url ;\n    if(country){\n        changableUrl = `${url}/countries/${country}`\n    }\n    try{\n        const { data : {confirmed, recovered, deaths, lastUpdate } }  = await  axios.get(changableUrl);\n        const modidfiedData = {confirmed, recovered, deaths, lastUpdate}\n        return modidfiedData;\n    }catch(error){\n        console.log(error);\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try{\n        const { data }  = await  axios.get(`${url}/daily`);\n        const modidfiedData = data.map(dailyData => ({\n            confirmed : dailyData.confirmed.total,\n            deaths : dailyData.deaths.total,\n            date : dailyData.reportDate\n        }));\n\n        return modidfiedData\n    }catch(error){\n        console.log(error);\n    }\n}\n\nexport const fetchCountries = async () => {\n    try{\n        const {data : {countries}} = await axios.get(`${url}/countries`)\n        return countries.map((country) => country.name);\n    }catch(error){\n        console.log(error);\n    }\n}\n","import React, { useEffect, useState } from 'react';\nimport { fetchDailyData}  from '../../Api';\nimport {Line, Bar} from 'react-chartjs-2'\nimport './Chart.css'\n \nconst Charts = ({data : {confirmed, recovered, deaths}, country}) => {\n    const [ dailyData, setDailyData ] = useState([]);\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData( await fetchDailyData())\n        }\n        fetchAPI();\n    }, []);\n\n    const lineChart = (\n        dailyData.length !== 0 || dailyData !== undefined\n        ? (\n        <Line \n        data = {{\n            labels : dailyData.map(({date}) => date),\n            datasets : [{\n                data :  dailyData.map(({confirmed}) => confirmed),\n                label : 'Infected People',\n                borderColor : '#rgba(76,0,255,0.99)',\n                pointBackgroundColor : 'rgba(76,0,255,0.76)',\n                pointBorderColor : 'rgba(76,0,255,0.85)',\n                backgroundColor : 'rgba(76,0,255,0.56)',\n                fill : false\n            },{\n                data :  dailyData.map(({deaths}) => deaths),\n                label : 'Total Deaths',\n                borderColor : 'red',\n                backgroundColor : 'rgba(255, 0, 0, 0.45)',\n                pointBackgroundColor : 'rgba(255, 0, 0, 0.34)',\n                pointBorderColor : 'rgba(255, 0, 0,1)',\n                fill : false\n            }]\n        }}\n        />) : null\n    )\n\n    const barChart = (\n        confirmed\n        ? (\n        <Bar \n        data = {{\n            labels : [ 'Infected ', 'Active', 'Recovered', 'Deaths'],\n            datasets :[{\n                labels : 'People',\n                backgroundColor : ['rgba(6,42,255,0.45)','rgba(6,255,255,0.45)', 'rgba(6,255,153,0.45)', 'rgba(255,6,6,0.45)'],\n                borderColor :['rgba(6,42,255,0.8)','rgba(6,255,255,0.8)',  'rgba(6,255,153,0.8)', 'rgba(255,6,6,0.8)'],\n                borderWidth :2,\n                hoverBorderWidth :3,\n                hoverBackgroundColor :['rgba(6,42,255,0.55)','rgba(6,255,255,0.55)',  'rgba(6,255,153,0.55)', 'rgba(255,6,6,0.55)'],\n                hoverBorderColor : ['rgba(6,42,255,0.85)','rgba(6,255,255,0.85)',  'rgba(6,255,153,0.85)', 'rgba(255,6,6,0.85)'],\n                data : [confirmed.value, (confirmed.value - (recovered.value +deaths.value)),recovered.value, deaths.value]\n            }] \n        }}\n        options = {{\n                legend :{display : false},\n                title :{display : true, text : `Current State In ${country}`},\n           \n        }}\n        />) : null\n    )\n\n    return(\n        <div className=\"chart-container\">\n            {country ? barChart  : lineChart}\n        </div>\n    )\n}\n\nexport default Charts","import React, { useEffect, useState } from 'react';\nimport Form from 'react-bootstrap/Form'\nimport './CountryPicker.css'\nimport { fetchCountries } from '../../Api'\n \nconst CountryPicker = ({handleCountryChange}) => {\n    const [fetchedCountries, setFetchedCountries ] = useState([]);\n\n    useEffect(() => {\n        const fetchCountryAPI = async () =>{\n            setFetchedCountries(await fetchCountries());\n        }\n        fetchCountryAPI();\n    },[setFetchedCountries]);\n\n    return(\n        <div className=\"country-picker\">\n            <div className=\"row justify-content-md-center text-center\">\n                <div className=\"col-md-4 \">\n                    <Form className=\"\">\n                        <Form.Group  defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)} controlId=\"exampleForm.SelectCustom\">\n                            <Form.Control as=\"select\"  custom>\n                            <option value=\"\">Global</option>\n                            {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n                            </Form.Control>\n                        </Form.Group>\n                    </Form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CountryPicker","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header'\nimport {Cards, Chart, CountryPicker} from './components'\nimport {fetchData} from './Api'\n\n\nclass App extends Component{\n  state = {\n    data : {},\n    country : ''\n  }\n\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n    this.setState({\n      data : fetchedData\n    })\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({\n      data : fetchedData,\n      country : country\n    })\n  }\n\n  render(){\n    const { data , country} = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n        <Header />\n          <h1>Covid-19 DashBoard</h1> \n          {/* <h1>\n          <span>C</span>\n          <span>o</span>\n          <span>r</span>\n          <span>o</span>\n          <span>n</span>\n          <span>a</span>\n          <span>-</span>\n          <span>d</span>\n          <span>a</span>\n          <span>s</span>\n          <span>h</span>\n          <span>b</span>\n          <span>o</span>\n          <span>a</span>\n          <span>r</span>\n          <span>d</span>\n        </h1> */}\n        < Cards data={data}/>\n        < CountryPicker handleCountryChange={this.handleCountryChange} />\n        < Chart data={data} country={country}/>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}